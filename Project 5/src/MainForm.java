/*
 * Matt Rutherford, Nathan Gamble, Jonathan Boothroyd
 * Project 5 myTunes with arrays
 * 12/6/2013
 */

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Allows user to load song data from a file and display the information for a selected song.
 */
public class MainForm extends javax.swing.JFrame
{

    Artist[] Songs = new Artist[26];
    private String filePath;
    private int songIndex = 0;
    private int songCount = 0;

    public MainForm()
    {
        initComponents();
    }

    /**
     * Creates an Artist object and adds it to the ListBox control.
     *
     * @param songInfo String array contain the song data values.
     */
    private void addArtist(String[] songInfo)
    {
        Artist temp = new Artist(songInfo);
        Songs[songCount++] = temp;
    }

    public void clearTextBoxes()
    {
        SongTextField.setText("");
        CoverArtImage.setIcon(null);
    }

    /**
     * Loads the song data from the selected input file.
     *
     * @param filename The file to read the data from.
     * @return True if the song data was read successfully; otherwise, False.
     */
    public boolean loadData(String filename)
    {
        BufferedReader reader = null;
        String line;
        boolean validData = false;

        try
        {
            reader = new BufferedReader(new FileReader(filename)); // Open the song file
            while ((line = reader.readLine()) != null)
            { // Read the data for a song from the file
                addArtist(line.split(",")); // If a song was read from the file, add the song to the ListBox control
            }
            // updateSelectedSong(); // Display the first song in the ListBox control
            validData = true;
            reader.close();
        }
        catch (FileNotFoundException fnfe)
        {
            JOptionPane.showMessageDialog(this, "The specified file, " + filename + " was not found.");
        }
        catch (IOException ioe)
        {
            JOptionPane.showMessageDialog(this, "An error occurred while reading data from the file, " + filename + ".");
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred while reading data from the file, " + filename + ".");
        }
        UpdateListBox(Songs);
        return validData;
    }

    /**
     * Display the currently selected song in the TextBox controls located in the Song Info area of the form.
     */
    private void updateSelectedSong()
    {
        Artist artist;
        if (songIndex >= 0)
        {
            SongListBox.setSelectedIndex(songIndex); // Access the selected artist object from the ListBox control
            artist = (Artist) SongListBox.getSelectedValue();

            // Assign the song data values to their appropriate TextBox controls
            SongTextField.setText(artist.getAlbum().getSong().getName());
            RunningTimeTextField.setText(artist.getAlbum().getSong().getRunningTime());
            TrackTextField.setText(artist.getAlbum().getSong().getTrackInfo());
            ArtistTextField.setText(artist.getName());
            GenreTextField.setText(artist.getAlbum().getGenre());
            AlbumTextField.setText(artist.getAlbum().getName());
            YearTextField.setText(artist.getAlbum().getReleaseYear());
            CoverArtImage.setIcon(new ImageIcon(filePath + artist.getAlbum().getCoverArt()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        BrowsejButton = new javax.swing.JButton();
        LoadDatajButton = new javax.swing.JButton();
        SongPathTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        CoverArtImage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        SongTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        RunningTimeTextField = new javax.swing.JTextField();
        TrackTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        GenreTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        YearTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ArtistTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        AlbumTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SongListBox = new javax.swing.JList();
        NextButton = new javax.swing.JButton();
        PreviousButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        OperationsComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        SearchTextBox = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("myTunes");
        setMinimumSize(new java.awt.Dimension(610, 600));
        setPreferredSize(new java.awt.Dimension(650, 770));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Available Songs");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 115, -1, -1));

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 740, 85, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Song File"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BrowsejButton.setText("Browse");
        BrowsejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowsejButtonActionPerformed(evt);
            }
        });
        jPanel1.add(BrowsejButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 25, 85, -1));

        LoadDatajButton.setText("Load Data");
        LoadDatajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDatajButtonActionPerformed(evt);
            }
        });
        jPanel1.add(LoadDatajButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 58, 85, -1));

        SongPathTextField.setEditable(false);
        jPanel1.add(SongPathTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, 480, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 630, 100));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Song Info"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CoverArtImage.setToolTipText("");
        CoverArtImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(CoverArtImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 255, 220, 220));

        jLabel2.setText("Song");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, -1));

        SongTextField.setEditable(false);
        jPanel2.add(SongTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 39, 235, 30));

        jLabel3.setText("Running Time");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 25, -1, -1));

        RunningTimeTextField.setEditable(false);
        jPanel2.add(RunningTimeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 39, 75, 30));

        TrackTextField.setEditable(false);
        jPanel2.add(TrackTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 93, 75, 30));

        jLabel4.setText("Track #");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 79, -1, -1));

        jLabel6.setText("Genre");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 133, -1, -1));

        GenreTextField.setEditable(false);
        jPanel2.add(GenreTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 147, 75, 30));

        jLabel8.setText("Year");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 187, -1, -1));

        YearTextField.setEditable(false);
        jPanel2.add(YearTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 201, 75, 30));

        jLabel5.setText("Artist");
        jLabel5.setToolTipText("");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 133, -1, -1));

        ArtistTextField.setEditable(false);
        jPanel2.add(ArtistTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 147, 235, 30));

        jLabel7.setText("Album");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 187, -1, -1));

        AlbumTextField.setEditable(false);
        jPanel2.add(AlbumTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 201, 235, 30));

        jLabel9.setText("Cover Art");
        jLabel9.setToolTipText("");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 241, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, 370, 485));

        SongListBox.setModel(new DefaultListModel());
        SongListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SongListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(SongListBox);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 240, 470));

        NextButton.setText("Next");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(NextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 690, 100, -1));

        PreviousButton.setText("Previous");
        PreviousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PreviousButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 690, 100, -1));

        RefreshButton.setText("Refresh");
        getContentPane().add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 640, -1, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Operations"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setText("Operation Selector");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        OperationsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sort by Album Name", "Sort by Artist Name", "Sort by Genre", "Sort by Release Year", "Sort by Running Time", "Sort by Song Name" }));
        OperationsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OperationsComboBoxActionPerformed(evt);
            }
        });
        jPanel3.add(OperationsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel11.setText("Search String");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, -1, -1));
        jPanel3.add(SearchTextBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 120, -1));

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        jPanel3.add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 100, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 370, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowsejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowsejButtonActionPerformed
        JFileChooser fc = new JFileChooser();

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            SongPathTextField.setText(fc.getSelectedFile().getAbsolutePath());
            filePath = fc.getCurrentDirectory().getPath() + "\\";
        }
    }//GEN-LAST:event_BrowsejButtonActionPerformed

    private void LoadDatajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDatajButtonActionPerformed
        loadData(SongPathTextField.getText());
    }//GEN-LAST:event_LoadDatajButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void SongListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SongListBoxValueChanged
        songIndex = SongListBox.getSelectedIndex();
       // Display the currently selected song in the ListBox control
        updateSelectedSong(); 
    }//GEN-LAST:event_SongListBoxValueChanged

    /**
     * Next button that goes to the next song in the listbox
     * @param evt 
     */
    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        if (SongListBox.getSelectedIndex() == SongListBox.getModel().getSize() - 1)
        {
            SongListBox.setSelectedIndex(0);
        }
        else
        {
            SongListBox.setSelectedIndex(SongListBox.getSelectedIndex() + 1);
        }
        //Calls updateSelectedSong method
        updateSelectedSong();
    }//GEN-LAST:event_NextButtonActionPerformed

       /**
        * Previous button that goes to the previous song in the listbox
        * @param evt 
        */
    private void PreviousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousButtonActionPerformed
        if (SongListBox.getSelectedIndex() == 0)
        {
            SongListBox.setSelectedIndex(SongListBox.getModel().getSize() - 1);
        }
        else
        {
            SongListBox.setSelectedIndex(SongListBox.getSelectedIndex() - 1);
        }
        //Calls updateSelectedSong method
        updateSelectedSong();
    }//GEN-LAST:event_PreviousButtonActionPerformed

    /**
     * Operations combo box for calling the different sorting arrays. 
     * @param evt 
     */
    private void OperationsComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OperationsComboBoxActionPerformed
    {//GEN-HEADEREND:event_OperationsComboBoxActionPerformed
        if (Songs != null)
        {
            switch (OperationsComboBox.getSelectedIndex())
            {
                case 0:
                    Array.SortByAlbumname(Songs);
                    break;
                case 1:
                    Array.SortByAristname(Songs);
                    break;
                case 2:
                    Array.SortByGenre(Songs);
                    break;
                case 3:
                    Array.SortByReleaseYear(Songs);
                    break;
                case 4:
                    Array.SortByRunningTime(Songs);
                    break;
                case 5:
                    Array.SortBySongName(Songs);
                    break;
                default:
                    break;
            }
            //Calls UpdateListBox method
            UpdateListBox(Songs);
        }
    }//GEN-LAST:event_OperationsComboBoxActionPerformed

    /**
     * Searches a string in the array
     * @param evt 
     */
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SearchButtonActionPerformed
    {//GEN-HEADEREND:event_SearchButtonActionPerformed

        UpdateListBox(Array.SearchArray(Songs, SearchTextBox.getText()));
    }//GEN-LAST:event_SearchButtonActionPerformed
    /**
     * Updates the list box
     * @param array 
     */
    private void UpdateListBox(Artist[] array)
    {
        ((DefaultListModel) SongListBox.getModel()).clear();
        clearTextBoxes();
        for (int i = 0; i < array.length; i++)
        {
            ((DefaultListModel) SongListBox.getModel()).addElement(array[i]);
        }
        updateSelectedSong();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AlbumTextField;
    private javax.swing.JTextField ArtistTextField;
    private javax.swing.JButton BrowsejButton;
    private javax.swing.JLabel CoverArtImage;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField GenreTextField;
    private javax.swing.JButton LoadDatajButton;
    private javax.swing.JButton NextButton;
    private javax.swing.JComboBox OperationsComboBox;
    private javax.swing.JButton PreviousButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JTextField RunningTimeTextField;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchTextBox;
    private javax.swing.JList SongListBox;
    private javax.swing.JTextField SongPathTextField;
    private javax.swing.JTextField SongTextField;
    private javax.swing.JTextField TrackTextField;
    private javax.swing.JTextField YearTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}